<?xml version="1.0"?>
<xsd:schema version="1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema"  elementFormDefault="qualified">
    <!-- *********************************************************************** -->
    <!--                                  Models                                 -->
    <!-- *********************************************************************** -->

    <xsd:complexType name="ModelsData">
        <xsd:sequence>
            <!--xsd:element name="Dummy"         type="DummyModel"    minOccurs="0" maxOccurs="unbounded"/>
             <xsd:element name="ExternalModel" type="ExternalModel" minOccurs="0" maxOccurs="unbounded"/-->
            <xsd:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="verbosity" type="verbosityAttr" default="all"/>
    </xsd:complexType>

    <xsd:simpleType  name="clArgType">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="prepend"/>
            <xsd:enumeration value="postpend" />
            <xsd:enumeration value="input"   />
            <xsd:enumeration value="output" />
            <xsd:enumeration value="text" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="CodeCLArgsType">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="type" type="clArgType" use="required">
                </xsd:attribute>
                <!-- Required only when the type is 'output' -->
                <!-- TODO: This functionality should be available with XSD 1.1's -->
                 <!--       xsd:alternative option. Look it up.                   -->
                <xsd:attribute name="arg" type="xsd:string">
                </xsd:attribute>
                <!-- Required only when the type is 'input' -->
                <!-- TODO: This functionality should be available with XSD 1.1's -->
                 <!--       xsd:alternative option. Look it up.                   -->
                <xsd:attribute name="extension" type="xsd:string">
                </xsd:attribute>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:simpleType  name="IOenumerator">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="input"  />
            <xsd:enumeration value="output" />
        </xsd:restriction>
    </xsd:simpleType>
    
    <xsd:complexType name="aliasSystem">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="type" type="IOenumerator" use="required">
                </xsd:attribute>
                <xsd:attribute name="variable" type="xsd:string" use="required">
                </xsd:attribute>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="CodeFileArgsType">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="type" type="IOenumerator" use="required" />
                <!-- Will match entry in template input file? -->
                <!-- I don't think this is testable since it depends on another -->
                <!-- input file. -->
                <xsd:attribute name="arg" type="xsd:string" use="required" />
                <!-- Required only when the type is 'input' -->
                <!-- TODO: This functionality should be available with XSD 1.1's -->
                 <!--       xsd:alternative option. Look it up.                   -->
                <xsd:attribute name="extension" type="xsd:string" />
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:simpleType  name="CodeModelType">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="GenericCode" />
            <xsd:enumeration value="Relap5" />
            <xsd:enumeration value="RAVEN" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="CodeModel">
        <xsd:sequence>
            <xsd:element name="executable" type="xsd:string" minOccurs="1" maxOccurs="1"/>
            <xsd:element name="preexec" type="xsd:string" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="alias" type="aliasSystem" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="clargs" type="CodeCLArgsType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="fileargs" type="CodeFileArgsType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name"     type="xsd:string"  use="required"/>
        <xsd:attribute name="subType"  type="CodeModelType"  use="required" />
        <xsd:attribute name="verbosity" type="verbosityAttr" default="all"/>
    </xsd:complexType>

    <xsd:complexType name="DummyModel">
        <xsd:sequence>
          <xsd:element name="alias" type="aliasSystem" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name"     type="xsd:string"  use="required"/>
        <xsd:attribute name="subType"  type="xsd:string"  use="required" fixed=""/>
        <xsd:attribute name="print"    type="xsd:string"/>
        <xsd:attribute name="verbosity" type="verbosityAttr" default="all"/>
    </xsd:complexType>

    <xsd:complexType name="ExternalModel">
        <xsd:sequence>
            <xsd:element name="variables" type="xsd:string" minOccurs="1" maxOccurs="1"/>
            <xsd:element name="alias" type="aliasSystem" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name"         type="xsd:string"  use="required"/>
        <xsd:attribute name="subType"      type="xsd:string"  use="required" fixed=""/>
        <xsd:attribute name="ModuleToLoad" type="xsd:string"  use="required"/>
        <xsd:attribute name="verbosity" type="verbosityAttr" default="all"/>
    </xsd:complexType>

    <xsd:complexType name="ROM">
        <xsd:sequence minOccurs="0">
            <xsd:element name="Features"  type="xsd:string" minOccurs="1"/>
            <xsd:element name="Target"  type="xsd:string" minOccurs="1"/>
            <xsd:element name="alias" type="aliasSystem" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name"         type="xsd:string"  use="required" />
        <xsd:attribute name="subType"      type="xsd:string"  use="required" />
        <xsd:attribute name="verbosity" type="verbosityAttr" default="all"/>
    </xsd:complexType>

    <!-- NDSpline does not have any additional features and does not require its own definition-->

    <xsd:simpleType  name="GaussPolyROMIndexSetType">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="TensorProduct" />
            <xsd:enumeration value="TotalDegree" />
            <xsd:enumeration value="HyperbolicCross" />
            <xsd:enumeration value="Custom" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType  name="SparseGridType">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="tensor" />
            <xsd:enumeration value="smolyak" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType  name="QuadratureType">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="Legendre" />
            <xsd:enumeration value="Hermite" />
            <xsd:enumeration value="Jacobi" />
            <xsd:enumeration value="ClenshawCurtis" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType  name="PolynomialType">
        <xsd:restriction   base="xsd:string">
            <xsd:enumeration value="Legendre" />
            <xsd:enumeration value="Hermite" />
            <xsd:enumeration value="Jacobi" />
            <xsd:enumeration value="Laguerre" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="GaussPolynomialRom">
        <xsd:complexContent>
            <xsd:extension base="ROM">
                <xsd:sequence>
                    <xsd:element name="IndexSet"  type="GaussPolyROMIndexSetType" minOccurs="1"/>
                    <xsd:element name="PolynomialOrder"  type="xsd:integer" minOccurs="1"/>
                    <!-- TODO: Do we want to test if this is a list of tuples? -->
                     <xsd:element name="IndexPoints"  type="xsd:string" minOccurs="1"/>
                     <xsd:element name="SparseGrid"  type="SparseGridType" minOccurs="0"/>
                     <xsd:element name="Interpolation">
                       <xsd:complexType>
                         <xsd:simpleContent>
                           <xsd:extension base="xsd:string">
                             <xsd:attribute name="quad" type="QuadratureType" />
                             <xsd:attribute name="poly" type="PolynomialType" />
                             <xsd:attribute name="weight" type="xsd:float" default="1" />
                           </xsd:extension>
                         </xsd:simpleContent>
                       </xsd:complexType>
                     </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="HDMRRom">
      <xsd:complexContent>
        <xsd:extension base="ROM">
          <xsd:sequence>
            <xsd:element name="SobolOrder"  type="xsd:integer" minOccurs="1"/>
            <xsd:element name="SparseGrid"  type="SparseGridType" minOccurs="0"/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>

                     <xsd:simpleType  name="positiveInteger">
                     <xsd:restriction   base="xsd:integer">
                     <xsd:minExclusive value="0"/>
                     </xsd:restriction>
                     </xsd:simpleType>

                     <xsd:complexType name="NDinvDistWeight">
                     <xsd:complexContent>
                     <xsd:extension base="ROM">
                     <xsd:sequence>
                     <xsd:element name="p"  type="positiveInteger" minOccurs="1"/>
                     </xsd:sequence>
                     </xsd:extension>
                     </xsd:complexContent>
                     </xsd:complexType>

                     <xsd:complexType name="SciKitLearn">
                     <xsd:complexContent>
                     <xsd:extension base="ROM">
                     <xsd:sequence>
                     <xsd:element name="SKLtype" minOccurs="1">
                     <!--               <xsd:complexType>
                     <xsd:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                     </xsd:complexType> -->
                </xsd:element>
            </xsd:sequence>
        </xsd:extension>
    </xsd:complexContent>
</xsd:complexType>

</xsd:schema>
