<?xml version="1.0" ?>
<Simulation verbosity="debug">
  <!-- Test info -->
  <TestInfo>
    <name>framework/Optimizers.multitrajlevelWithModelHolding</name>
    <author>alfoa</author>
    <created>2017-07-26</created>
    <classesTested>Optimizer</classesTested>
    <description>
      This test runs the multilevel optimization with multiple trajectories on Beale's function and an amplifier (EnsembleModel)
      It tests the possibility to block some models (Beale) in the optimization process when multilevel optimization is performed.
    </description>
  </TestInfo>

  <!-- actual RAVEN input -->
  <RunInfo>
    <WorkingDir>MTMLwithEnsembleAndModelHolding</WorkingDir>
    <Sequence>optimize,print,getOptPoint</Sequence>
    <batchSize>1</batchSize>
    <maxQueueSize>0</maxQueueSize>
  </RunInfo>

  <Steps>
    <MultiRun name="optimize">
      <Input class="DataObjects" type="PointSet">dummyINbeale</Input>
      <Input class="DataObjects" type="PointSet">dummyINAmplifier</Input>
      <Model class="Models" type="EnsembleModel">Ensemble_with_amplifier</Model>
      <Optimizer class="Optimizers" type="SPSA">opter</Optimizer>
      <SolutionExport class="DataObjects" type="HistorySet">opt_export</SolutionExport>
      <Output class="DataObjects" type="PointSet">optOut</Output>
    </MultiRun>
    <IOStep name="print" pauseAtEnd="True">
      <Input class="DataObjects" type="PointSet">opt_soln</Input>
      <Output class="OutStreams" type="Print">opt_soln</Output>
    </IOStep>
    <PostProcess name="getOptPoint">
      <Input class="DataObjects" type="HistorySet">opt_export</Input>
      <Model class="Models" type="PostProcessor">snapshot</Model>
      <Output class="DataObjects" type="PointSet">opt_soln</Output>
      <Output class="OutStreams" type="Print">opt_soln</Output>
    </PostProcess>
  </Steps>

  <Optimizers>
    <SPSA name="opter">
      <initialization>
        <limit>10000</limit>
        <type>min</type>
        <initialSeed>42</initialSeed>
      </initialization>
      <TargetEvaluation class="DataObjects" type="PointSet">optOut</TargetEvaluation>
      <convergence>
          <iterationLimit>1000</iterationLimit>
          <gradientThreshold>1e-4</gradientThreshold>
          <relativeThreshold>1e-6</relativeThreshold>
      </convergence>
      <variable name='x'>
        <upperBound>4.5</upperBound>
        <lowerBound>-4.5</lowerBound>
        <initial>-2,0,2</initial>
      </variable>
      <variable name='y'>
        <upperBound>4.5</upperBound>
        <lowerBound>-4.5</lowerBound>
        <initial>-2,0,2</initial>
      </variable>
      <variable name='z'>
          <upperBound>4.5</upperBound>
          <lowerBound>0.0</lowerBound>
          <initial>2,0.1,4</initial>
      </variable>
      <objectVar>objAns</objectVar>
      <parameter>
        <c>1e-3</c>
      </parameter>
      <multilevel>
        <subspace name='first'>x,y</subspace>
        <!--<subspace name='second' >z</subspace>-->
         <subspace name='second' holdOutputSpace="ans">z</subspace>
        <sequence>first,second</sequence>
      </multilevel>
    </SPSA>
  </Optimizers>

  <Models>
    <ExternalModel ModuleToLoad="../../../framework/AnalyticModels/optimizing/beale" name="beale" subType="">
      <variables>x,y,ans</variables>
    </ExternalModel>
    <ExternalModel ModuleToLoad="amplifier" name="amplifier" subType="">
        <!-- This model just aplify the ans with the z value that is actually part of the optimization space... "z" should converge to 0 -->
        <variables>z,ans,objAns</variables>
    </ExternalModel>

    <EnsembleModel name="Ensemble_with_amplifier" subType="">
        <Model class="Models" type="ExternalModel">
            beale
            <Input            class="DataObjects" type="PointSet">dummyINbeale</Input>
            <TargetEvaluation class="DataObjects" type="PointSet">optOutbeale</TargetEvaluation>
        </Model>
        <Model class="Models" type="ExternalModel">
            amplifier
            <Input            class="DataObjects" type="PointSet">dummyINAmplifier</Input>
            <TargetEvaluation class="DataObjects" type="PointSet">optOutAmplifier</TargetEvaluation>
        </Model>
    </EnsembleModel>



    <PostProcessor name="snapshot" subType="InterfacedPostProcessor">
      <method>HistorySetSnapShot</method>
      <type>max</type>
      <pivotVar>varsUpdate</pivotVar>
    </PostProcessor>
  </Models>

  <DataObjects>
      <PointSet name="dummyIN">
          <Input>x,y,z</Input>
          <Output>OutputPlaceHolder</Output>
      </PointSet>
    <PointSet name="dummyINbeale">
      <Input>x,y</Input>
      <Output>OutputPlaceHolder</Output>
    </PointSet>
    <PointSet name="dummyINAmplifier">
        <Input>z,ans</Input>
        <Output>OutputPlaceHolder</Output>
    </PointSet>
    <PointSet name="optOutbeale">
      <Input>x,y</Input>
      <Output>ans</Output>
    </PointSet>
    <PointSet name="optOutAmplifier">
        <Input>z,ans</Input>
        <Output>objAns</Output>
    </PointSet>

    <PointSet name="optOut">
        <Input>x,y,z</Input>
        <Output>objAns</Output>
    </PointSet>
    <PointSet name="opt_soln">
      <Input>trajID</Input>
      <Output>x,y,z,objAns,varsUpdate</Output>
    </PointSet>
    <HistorySet name="opt_export">
      <Input>trajID</Input>
      <Output>x,y,z,objAns,varsUpdate,stepSize,convergenceAbs,convergenceRel,convergenceGrad</Output>
    </HistorySet>
  </DataObjects>

  <OutStreams>
    <Print name="opt_export">
      <type>csv</type>
      <source>opt_export</source>
    </Print>
    <Print name="opt_soln">
      <type>csv</type>
      <source>opt_soln</source>
    </Print>
  </OutStreams>

</Simulation>
