<?xml version="1.0" ?>
<Simulation>
  <TestInfo>
    <name>framework/PostProcessors/TopologicalPostProcessor.knn</name>
    <author>maljdan</author>
    <created>2015-09-21</created>
    <classesTested>PostProcessors.TopologicalDecomposition</classesTested>
    <description>
       A simple example of the approximate Morse-Smale complex (AMSC) interface
       that exercises the k-nearest neighbor graph structure as the underlying
       connectivity model for the point cloud. Note, each of the "graph" test
       cases uses the GaussianPeaks test case which consists of 4 distinctly
       shaped Gaussian peaks in a 2D input domain.
    </description>
    <revisions>
      <revision author="cogljj" date="2015-09-29">Modifying external modules to use relative to working directory.</revision>
      <revision author="maljdan" date="2015-10-06">Reducing the graph tests for the topology pp, and re-golding them, also adding a plotter to validate the results visually.</revision>
      <revision author="talbpaul" date="2016-02-08">Converted failing tests.</revision>
      <revision author="maljdan" date="2016-04-06">Updating test cases to reflect the changes to the user input.</revision>
      <revision author="maljdan" date="2017-01-17">Adding test description.</revision>
    </revisions>
  </TestInfo>
  <RunInfo>
    <WorkingDir>data</WorkingDir>
    <Sequence>
      sampleData,
      decomposeNN
    </Sequence>
  </RunInfo>

  <Models>
    <ExternalModel ModuleToLoad="../GaussianPeaks" name="test" subType="">
      <variables>X,Y,Z</variables>
    </ExternalModel>
    <!-- Nearest neighbor -->
    <PostProcessor name="AMSC_NN" subType="TopologicalDecomposition">
      <graph>Approximate KNN</graph>
      <gradient>steepest</gradient>
      <knn>9</knn>
      <normalization>None</normalization>
      <parameters>X,Y</parameters>
      <response>Z</response>
      <simplification>0.2</simplification>
      <persistence>difference</persistence>
    </PostProcessor>
  </Models>

  <Distributions>
    <Uniform name="uniform">
      <lowerBound>0</lowerBound>
      <upperBound>1</upperBound>
    </Uniform>
  </Distributions>

  <Samplers>
    <MonteCarlo name="sampler">
      <samplerInit>
        <initialSeed>88</initialSeed>
        <limit>500</limit>
      </samplerInit>
      <variable name="X">
        <distribution>uniform</distribution>
      </variable>
      <variable name="Y">
        <distribution>uniform</distribution>
      </variable>
    </MonteCarlo>
  </Samplers>

  <Steps>
    <!-- Sample the data from the test function -->
    <MultiRun name="sampleData" sleepTime="1e-5">
      <Input class="DataObjects" type="PointSet">dummyIN</Input>
      <Model class="Models" type="ExternalModel">test</Model>
      <Sampler class="Samplers" type="MonteCarlo">sampler</Sampler>
      <Output class="DataObjects" type="PointSet">testData</Output>
    </MultiRun>
    <!-- Perform the topological decomposition -->
    <PostProcess name="decomposeNN">
      <Input class="DataObjects" type="PointSet">testData</Input>
      <Model class="Models" type="PostProcessor">AMSC_NN</Model>
      <Output class="DataObjects" type="PointSet">outNN</Output>
      <Output class="OutStreams" type="Print">segNN</Output>
    </PostProcess>
  </Steps>

  <OutStreams>
    <!-- A csv file containing the output of the example -->
    <Print name="segNN">
      <type>csv</type>
      <source>outNN</source>
    </Print>
  </OutStreams>

  <DataObjects>
    <!-- The input PointSet object -->
    <PointSet name="dummyIN">
      <Input>X,Y</Input>
      <Output>OutputPlaceHolder</Output>
    </PointSet>
    <PointSet name="testData">
      <Input>X,Y</Input>
      <Output>Z</Output>
    </PointSet>
    <!-- The output PointSet objects -->
    <PointSet name="outNN">
      <Input>X,Y</Input>
      <Output>Z</Output>
    </PointSet>
  </DataObjects>

</Simulation>
