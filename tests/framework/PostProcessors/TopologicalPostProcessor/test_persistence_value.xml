<?xml version="1.0" ?>
<Simulation>
  <TestInfo>
    <name>framework/PostProcessors/TopologicalPostProcessor.persistence_value</name>
    <author>maljdan</author>
    <created>2015-09-21</created>
    <classesTested>PostProcessors.TopologicalDecomposition</classesTested>
    <description>
       A simple example of the approximate Morse-Smale complex (AMSC) interface
       where we select a persistence level based on the standard notion of the
       function value difference between the extrema and its nearest valued
       neighboring critical point. That is, larger peaks and valleys will
       persist longer than smaller "noisy" features. This is the standard
       definition of persistence used in Morse topology. Note, that all of the
       "persistence" tests will use the Schwefel function for testing.
    </description>
    <revisions>
      <revision author="cogljj" date="2015-09-29">Modifying external modules to use relative to working directory.</revision>
      <revision author="maljdan" date="2015-10-05">Removing the local fits from the topology PP and reducing the problem sizes for the persistence tests.</revision>
      <revision author="maljdan" date="2015-10-05">Adjusting the Schwefel function's domain to fit better with fewer data points.</revision>
      <revision author="maljdan" date="2015-10-06">Correcting the user manual and reducing the sleepTime on these tests to reduce their total run time to ~15 s on my local machine.</revision>
      <revision author="talbpaul" date="2016-02-08">Converted failing tests.</revision>
      <revision author="maljdan" date="2016-04-06">Updating test cases to reflect the changes to the user input.</revision>
      <revision author="maljdan" date="2017-01-17">Adding test description.</revision>
    </revisions>
  </TestInfo>
  <RunInfo>
    <WorkingDir>data</WorkingDir>
    <Sequence>
      sampleData,
      decomposeValue
    </Sequence>
  </RunInfo>

  <Models>
    <ExternalModel ModuleToLoad="../Schwefel" name="testFunction" subType="">
      <variables>X,Y,Z</variables>
    </ExternalModel>
    <!-- The default standard definition of persistence -->
    <PostProcessor name="AMSC_Value" subType="TopologicalDecomposition">
      <graph>Beta Skeleton</graph>
      <gradient>steepest</gradient>
      <beta>1</beta>
      <knn>8</knn>
      <normalization>None</normalization>
      <parameters>X,Y</parameters>
      <response>Z</response>
      <simplification>200</simplification>
      <persistence>difference</persistence>
    </PostProcessor>
  </Models>

  <Distributions>
    <Normal name="NormDist">
      <mean>0.5</mean>
      <sigma>0.0125</sigma>
    </Normal>
  </Distributions>

  <Samplers>
    <Grid name="gridSampler">
      <variable name="X">
        <distribution>NormDist</distribution>
        <grid construction="equal" steps="25" type="value">0 1</grid>
      </variable>
      <variable name="Y">
        <distribution>NormDist</distribution>
        <grid construction="equal" steps="25" type="value">0 1</grid>
      </variable>
    </Grid>
  </Samplers>

  <Steps>
    <!-- Sample the test function as an External Model -->
    <MultiRun name="sampleData" pauseAtEnd="False" sleepTime="1e-5">
      <Input class="DataObjects" type="PointSet">dummyIN</Input>
      <Model class="Models" type="ExternalModel">testFunction</Model>
      <Sampler class="Samplers" type="Grid">gridSampler</Sampler>
      <Output class="DataObjects" type="PointSet">testData</Output>
    </MultiRun>
    <!-- Perform the topological decomposition -->
    <PostProcess name="decomposeValue">
      <Input class="DataObjects" type="PointSet">testData</Input>
      <Model class="Models" type="PostProcessor">AMSC_Value</Model>
      <Output class="DataObjects" type="PointSet">dataValue</Output>
      <Output class="OutStreams" type="Print">segValue</Output>
    </PostProcess>
  </Steps>

  <OutStreams>
    <!-- A csv file containing the output of the example -->
    <Print name="segValue">
      <type>csv</type>
      <source>dataValue</source>
    </Print>
  </OutStreams>

  <DataObjects>
    <!-- The input TimePointSet object -->
    <PointSet name="dummyIN">
      <Input>X,Y</Input>
      <Output>OutputPlaceHolder</Output>
    </PointSet>
    <PointSet name="testData">
      <Input>X,Y</Input>
      <Output>Z</Output>
    </PointSet>
    <!-- The output TimePointSet objects -->
    <PointSet name="dataValue">
      <Input>X,Y</Input>
      <Output>Z</Output>
    </PointSet>
  </DataObjects>

</Simulation>
