<?xml version="1.0" ?>
<Simulation verbosity="debug">
  <TestInfo>
    <name>framework/PostProcessors/LimitSurface.testLimitSurfaceIntegralPP</name>
    <author>alfoa</author>
    <created>2015-05-08</created>
    <classesTested>Models.PostProcessors.LimitSurface, Models.PostProcessors.LimitSurfaceIntegral</classesTested>
    <description>
       This test is aimed to check the capability of RAVEN to generate Limit Surfaces from a pre-generated data set (in this case, generated with
       a MonteCarlo sampling). In addition, this test is aimed to check the capability of RAVEN to compute the integral of the Limit Surface (e.g.
       Failure probability) both probability-weighted and not.
    </description>
    <revisions>
      <revision author="alfoa" date="2015-05-11">Limit surface integral</revision>
      <revision author="alfoa" date="2015-05-12">Closes #153</revision>
      <revision author="alfoa" date="2015-06-17">Closes #213</revision>
      <revision author="alfoa" date="2015-06-18">Changed Name of all DataObjects</revision>
      <revision author="maljdan" date="2016-04-06">Updating test cases to reflect the changes to the user input.</revision>
      <revision author="alfoa" date="2017-01-21">Adding this test description.</revision>
      <revision author="alfoa" date="2017-12-14">
          Moved LimitSurface Postprocessor tests in a specific directory (tests/framework/PostProcessors/LimitSurface) and updated for new DataObject structure
      </revision>
      <revision author="alfoa" date="2018-09-20">This test is now a requirement test.</revision>
      <revision author="alfoa" date="2019-03-07">Modified syntax in Functions as for issue #934</revision>
    </revisions>
    <requirements>R-RA-7</requirements>
  </TestInfo>

  <RunInfo>
    <WorkingDir>limitSurface_integral</WorkingDir>
    <Sequence>FirstMRun,ComputeLimitSurfacePositiveNegative,ComputeLimitSurfaceIntegralWeighted,ComputeLimitSurfaceIntegralUnWeighted</Sequence>
    <batchSize>1</batchSize>
  </RunInfo>

  <Files>
    <Input name="limitSurfaceTestExternalModel.py" type="">limitSurfaceTestExternalModel.py</Input>
    <Input name="goalFunctionTest.py" type="">goalFunctionTest.py</Input>
    <Input name="LimitSurfaceUnWeightedPb_FileObj.csv" type="">LimitSurfaceUnWeightedPb_FileObj.csv</Input>
    <Input name="LimitSurfaceWeightedPb_FileObj.csv" type="">LimitSurfaceWeightedPb_FileObj.csv</Input>
  </Files>

  <Models>
    <ExternalModel ModuleToLoad="limitSurfaceTestExternalModel" name="PythonModule" subType="">
      <variables>z,x0,y0</variables>
    </ExternalModel>
    <PostProcessor name="computeLimitSurfacePositiveNegative" subType="LimitSurface" verbosity="quiet">
      <parameters>x0,y0</parameters>
      <side>both</side>
      <ROM class="Models" type="ROM">Acc</ROM>
      <Function class="Functions" type="External">goalFunctionForLimitSurface</Function>
    </PostProcessor>
    <PostProcessor name="LimitSurfaceIntegralWeighted" subType="LimitSurfaceIntegral">
      <tolerance>0.001</tolerance>
      <integralType>MonteCarlo</integralType>
      <seed>20021986</seed>
      <target>goalFunctionForLimitSurface</target>
      <outputName>EventProbability</outputName>
      <variable name="x0">
        <distribution class="Distributions" type="Normal">x0_distrib</distribution>
      </variable>
      <variable name="y0">
        <distribution class="Distributions" type="Normal">y0_distrib</distribution>
      </variable>
    </PostProcessor>
    <PostProcessor name="LimitSurfaceIntegralUnWeightedWithBounds" subType="LimitSurfaceIntegral">
      <tolerance>0.001</tolerance>
      <integralType>MonteCarlo</integralType>
      <seed>20021986</seed>
      <target>goalFunctionForLimitSurface</target>
      <outputName>EventProbability</outputName>
      <variable name="x0">
        <lowerBound>-2.0</lowerBound>
        <upperBound>12.0</upperBound>
      </variable>
      <variable name="y0">
        <lowerBound>-1.0</lowerBound>
        <upperBound>11.0</upperBound>
      </variable>
    </PostProcessor>
    <ROM name="Acc" subType="SciKitLearn">
      <Features>x0,y0</Features>
      <Target>goalFunctionForLimitSurface</Target>
      <SKLtype>svm|LinearSVC</SKLtype>
      <verbose>1</verbose>
      <tol>0.0001</tol>
      <C>10</C>
    </ROM>
  </Models>

  <Functions>
    <!--External file="limitSurface_integral/goalFunctionTest" name="goalFunctionForLimitSurface"-->
    <External file="goalFunctionTest" name="goalFunctionForLimitSurface">
      <variables>z</variables>
    </External>
  </Functions>

  <Distributions>
    <Normal name="x0_distrib">
      <mean>4</mean>
      <sigma>2</sigma>
      <lowerBound>0.0</lowerBound>
      <upperBound>8.0</upperBound>
    </Normal>
    <Normal name="y0_distrib">
      <mean>5</mean>
      <sigma>2</sigma>
      <lowerBound>0.0</lowerBound>
      <upperBound>10.0</upperBound>
    </Normal>
  </Distributions>

  <Samplers>
    <Grid name="Grid_external">
      <variable name="x0">
        <distribution>x0_distrib</distribution>
        <grid construction="equal" steps="10" type="CDF">0.1 0.9</grid>
      </variable>
      <variable name="y0">
        <distribution>y0_distrib</distribution>
        <grid construction="equal" steps="10" type="CDF">0.1 0.9</grid>
      </variable>
    </Grid>
  </Samplers>

  <Steps>
    <MultiRun name="FirstMRun" re-seeding="20021986">
      <Input class="DataObjects" type="PointSet">Dummy</Input>
      <Model class="Models" type="ExternalModel">PythonModule</Model>
      <Sampler class="Samplers" type="MonteCarlo">Grid_external</Sampler>
      <Output class="DataObjects" type="PointSet">PointSetPostProcTest</Output>
      <Output class="OutStreams" type="Print">PointSetPostProcTest_dump</Output>
    </MultiRun>
    <PostProcess name="ComputeLimitSurfacePositiveNegative">
      <Input class="DataObjects" type="PointSet">PointSetPostProcTest</Input>
      <Model class="Models" type="PostProcessor">computeLimitSurfacePositiveNegative</Model>
      <Output class="DataObjects" type="PointSet">LimitSurfacePositiveNegative</Output>
      <Output class="OutStreams" type="Print">LimitSurfacePositiveNegative_dump</Output>
    </PostProcess>
    <PostProcess name="ComputeLimitSurfaceIntegralWeighted">
      <Input class="DataObjects" type="PointSet">LimitSurfacePositiveNegative</Input>
      <Model class="Models" type="PostProcessor">LimitSurfaceIntegralWeighted</Model>
      <Output class="DataObjects" type="PointSet">LimitSurfaceWeightedPb</Output>
      <Output class="OutStreams" type="Print">LimitSurfaceWeightedPb_dump</Output>
      <!--
         NOT ALLOWED ANYMORE:
        <Output class="Files" type="">LimitSurfaceWeightedPb_FileObj.csv</Output>
      -->
    </PostProcess>
    <PostProcess name="ComputeLimitSurfaceIntegralUnWeighted">
      <Input class="DataObjects" type="PointSet">LimitSurfacePositiveNegative</Input>
      <Model class="Models" type="PostProcessor">LimitSurfaceIntegralUnWeightedWithBounds</Model>
      <Output class="DataObjects" type="PointSet">LimitSurfaceUnWeightedPb</Output>
      <Output class="OutStreams" type="Print">LimitSurfaceUnWeightedPb_dump</Output>
      <!--
         NOT ALLOWED ANYMORE:
        <Output class="Files" type="">LimitSurfaceUnWeightedPb_FileObj.csv</Output>
      -->
    </PostProcess>
  </Steps>

  <OutStreams>
    <Print name="PointSetPostProcTest_dump">
      <type>csv</type>
      <source>PointSetPostProcTest</source>
    </Print>
    <Print name="LimitSurfaceUnWeightedPb_dump">
      <type>csv</type>
      <source>LimitSurfaceUnWeightedPb</source>
    </Print>
    <Print name="LimitSurfacePositiveNegative_dump">
      <type>csv</type>
      <source>LimitSurfacePositiveNegative</source>
    </Print>
    <Print name="LimitSurfaceWeightedPb_dump">
      <type>csv</type>
      <source>LimitSurfaceWeightedPb</source>
    </Print>
  </OutStreams>

  <DataObjects>
    <PointSet name="PointSetPostProcTest">
      <Input>x0,y0</Input>
      <Output>z</Output>
    </PointSet>
    <PointSet name="LimitSurfacePositiveNegative">
      <Input>y0,x0</Input>
      <Output>goalFunctionForLimitSurface</Output>
    </PointSet>
    <PointSet name="LimitSurfaceWeightedPb">
      <Input>y0,x0</Input>
      <Output>EventProbability,goalFunctionForLimitSurface</Output>
    </PointSet>
    <PointSet name="LimitSurfaceUnWeightedPb">
      <Input>y0,x0</Input>
      <Output>EventProbability,goalFunctionForLimitSurface</Output>
    </PointSet>
    <PointSet name="Dummy">
      <Input>x0,y0</Input>
      <Output>OutputPlaceHolder</Output>
    </PointSet>
  </DataObjects>

</Simulation>
