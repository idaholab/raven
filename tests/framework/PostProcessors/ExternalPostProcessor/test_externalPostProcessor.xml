<?xml version="1.0" ?>
<Simulation verbosity="debug">
  <TestInfo>
    <name>framework/PostProcessors/ExternalPostProcessor.simple</name>
    <author>maljdan</author>
    <created>2015-09-17</created>
    <classesTested>PostProcessors.ExternalPostProcessor</classesTested>
    <description>
      A simple example of writing an external python function and using it
      inside RAVEN.

      Here we are testing several things:
      1.  We can handle data from multiple input files.
      2.  We can handle methods defined in multiple .py files.
      3.  A subset of inputs from the originating data is reported correctly,
          note we ask for B, but not Y (they contain the same information).
      4.  A subset of outputs from the originating data is reported correctly,
          note we ask for Z, but not C (they contain the same information).
      5.  Reporting an overloaded function with the appropriately qualified
          names: basicOps.Sum and advOps.Sum.
      6.  A non-overloaded function is reported correctly: Norm
      7.  An overloaded function name can be specified by its qualified name and
          only that version will be applied to the output: advOps.Delta.
      8.  If you ask for a function that is not defined, it will give a warning
          message and skip it: DoesNotExist
      9.  Vector return type that is appended as a column to the data: Norm
      10. Vector return type that is stored in the metadata: Mean
      11. Scalar or non-conformant data size stored in metadata: Min
      12. Scalar or non-conformant data size warning message when attempting to
          store it in the output, it is instead put in the metadata: Max
    </description>
    <revisions>
      <revision author="maljdan" date="2016-04-06">Updating test cases to reflect the changes to the user input.</revision>
      <revision author="talbpaul" date="2016-04-26">Adding check for pre-existing backup files when validating, fixing comment in test, and removing 'type' in databases.</revision>
      <revision author="talbpaul" date="2016-06-28">Adding check for pre-existing backup files when validating, fixing comment in test, and removing 'type' in databases.</revision>
      <revision author="maljdan" date="2017-01-17">Adding test description.</revision>
    </revisions>
  </TestInfo>

  <RunInfo>
    <WorkingDir>externalPostProcessor</WorkingDir>
    <Sequence>
    loadData1,
    loadData2,
    applyFunctions,
    saveData
  </Sequence>

  </RunInfo>

  <Models>
    <!-- This post-processor will call methods defined in two external python
     scripts compatible with RAVEN -->
    <PostProcessor name="functionPP" subType="External" verbosity="debug">
      <method>Delta,Sum,Norm,Mean,Max,Min,DoesNotExist</method>
      <Function class="Functions" type="External">basicOps</Function>
      <Function class="Functions" type="External">advOps</Function>
    </PostProcessor>
  </Models>

  <!-- The external methods will be defined in the files pointed to by these
     guys -->
  <Functions>
    <External file="externalPostProcessor/BasicOperators" name="basicOps">
      <variable>X</variable>
      <variable>Y</variable>
    </External>
    <External file="externalPostProcessor/AdvancedOperators" name="advOps">
      <variable>A</variable>
      <variable>B</variable>
    </External>
  </Functions>

  <Steps>
    <!-- Read the data from a csv into the hdf5 database used by this run -->
    <IOStep fromDirectory="." name="loadData1">
      <Input class="DataObjects" type="PointSet">testData</Input>
      <Output class="Databases" type="HDF5">myDB</Output>
    </IOStep>
    <IOStep fromDirectory="." name="loadData2">
      <Input class="DataObjects" type="PointSet">testData2</Input>
      <Output class="Databases" type="HDF5">myDB</Output>
    </IOStep>
    <!-- Write the results to a csv -->
    <IOStep name="saveData">
      <Input class="DataObjects" type="PointSet">outTPS</Input>
      <Output class="OutStreams" type="Print">myDump</Output>
    </IOStep>
    <!-- Perform the sum and difference operators using the function interface -->
    <PostProcess name="applyFunctions">
      <Input class="DataObjects" type="PointSet">testData2</Input>
      <Input class="DataObjects" type="PointSet">testData</Input>
      <Model class="Models" type="PostProcessor">functionPP</Model>
      <Output class="DataObjects" type="PointSet">outTPS</Output>
    </PostProcess>
  </Steps>

  <OutStreams>
    <!-- A csv file containing the output of the example -->
    <Print name="myDump">
      <type>csv</type>
      <source>outTPS</source>
    </Print>
  </OutStreams>

  <Databases>
    <HDF5 name="myDB" readMode="overwrite"/>
  </Databases>

  <DataObjects>
    <!-- The input PointSet objects -->
    <PointSet name="testData">
      <Input>X,Y</Input>
      <Output>Z</Output>
    </PointSet>
    <PointSet name="testData2">
      <Input>A,B</Input>
      <Output>C</Output>
    </PointSet>
    <!-- The output PointSet object -->
    <PointSet name="outTPS">
      <Input>A,B,X</Input>
      <Output>Z,Sum,Norm,advOps.Delta,Max</Output>
    </PointSet>
  </DataObjects>

</Simulation>
