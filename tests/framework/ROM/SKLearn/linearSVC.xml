<?xml version="1.0" ?>
<Simulation>
  <TestInfo>
    <name>framework/ROM/SKLearn.linearSVC</name>
    <author>maljdan</author>
    <created>2016-04-28</created>
    <classesTested>SupervisedLearning.SciKitLearn</classesTested>
    <description>
       An example exercising supervised sklearn methods, specifically
       the svm|LinearSVC model is tested here.

       Note, all of the tests in SKLearn operate on a 2D input domain with
       the goal of fitting a paraboloid function. The input dimensions are
       of largely different scales and one dimension is off-centered from
       the origin to ensure that normalization is being handled correctly.
       Classifiers will use this same function to determine if a point is
       above 0.25, and multitask methods will additionally fit an additive
       model (x+y).
    </description>
    <revisions>
      <revision author="maljdan" date="2016-05-02">    Fixing the random_state of the SVMs.</revision>
      <revision author="maljdan" date="2016-05-02">    Fixing another SVC case for older scikit-learn versions.</revision>
      <revision author="talbpaul" date="2016-09-15">    other test updates</revision>
      <revision author="maljdan" date="2017-01-19">Adding this test description.</revision>
    </revisions>
  </TestInfo>
  <RunInfo>
    <WorkingDir>data</WorkingDir>
    <Sequence>
      sample,
      train,
      resample
    </Sequence>
  </RunInfo>

  <Models>
    <ExternalModel ModuleToLoad="./testClassifier" name="foo" subType="">
      <variables>X,Y,Z</variables>
    </ExternalModel>
    <ROM name="modelUnderTest" subType="SciKitLearn">
      <SKLtype>svm|LinearSVC</SKLtype>
      <Features>X,Y</Features>
      <Target>Z</Target>
      <C>1.0</C>
      <!-- This does not work with 0.15.2 of sklearn -->
      <!--
        <loss>squared_hinge</loss>
      -->
      <penalty>l2</penalty>
      <dual>True</dual>
      <tol>1e-4</tol>
      <multi_class>ovr</multi_class>
      <fit_intercept>True</fit_intercept>
      <intercept_scaling>1</intercept_scaling>
      <class_weight>None</class_weight>
      <verbose>0</verbose>
      <random_state>1</random_state>
    </ROM>
  </Models>

  <ExternalXML node="Distributions" xmlToLoad="sharedDistributions.xml"/>
  <ExternalXML node="Samplers" xmlToLoad="sharedSamplers.xml"/>
  <ExternalXML node="Steps" xmlToLoad="sharedSteps.xml"/>
  <OutStreams>
    <!-- A csv file containing the output of the example -->
    <Print name="outData">
      <type>csv</type>
      <source>outData</source>
      <filename>outlinearSVC</filename>
      <what>input,output</what>
    </Print>
  </OutStreams>

  <ExternalXML node="DataObjects" xmlToLoad="sharedDataObjects.xml"/>
</Simulation>
