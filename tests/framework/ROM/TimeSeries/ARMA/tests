[Tests]
 # NOTE the ARMA training optimization sequence is often very, very dependent on small changes in values.
 # As a result, it is very difficult to get the same results on slightly different systems, such as different operating systems.
 # By way of comparison, running the test_ARMA.xml input and comparing the first entry in the first sampled history, the following
 # operating system results are obtained, each with identical python library installations, with both crow and numpy seeded identically::
 # MAC OSX (10.12.6): 9.457661108
 # Windows 7 Test   : 9.457661214
 # Ubuntu 16.04 LTS : 9.457659911
 # Ubuntu 18.04 LTS : 9.466078333
 # As we can observe, we at most can rely on 2 digits of similarity even on the first point.
 # A good alternative for non-correlated ARMAs is to run statistics on the results (mean, variance) and check those instead.

 [./Basic]
   type = 'RavenFramework'
   input = 'basic.xml'
   output = 'Basic/romMeta.csv'
   UnorderedXml = 'Basic/romMeta.xml'
   rel_err = 1e-6
  [../]
  [./ARMAparallel]
   type = 'RavenFramework'
   input = 'test_ARMA_parallel.xml'
   output = 'ARMAparallel/writeSynDataOut.csv ARMAparallel/writeSynDataOut.xml'
  [../]
  [./ARMAreseedPrecursor]
   type = 'RavenFramework'
   input = 'arma_reseed_precursor.xml'
   output = 'ARMAreseed/arma.pk'
    [./romcsv]
      type = OrderedCSV
      output = 'ARMAreseed/rommeta.csv'
      rel_err = 1e-5
    [../]
    [./romxml]
      type = XML
      unordered = true
      output = 'ARMAreseed/rommeta.xml'
      rel_err = 1e-5
    [../]
    [./signalexist]
      type = Exists
      output = 'ARMAreseed/signals_0.csv ARMAreseed/signals_1.csv ARMAreseed/signals_2.csv ARMAreseed/signals_3.csv ARMAreseed/signals.csv '
    [../]
  [../]
  [./ARMAreseedTest]
   type = 'RavenFramework'
   input = 'arma_reseed_test.xml'
   output = 'ARMAreseed/results.csv '

   prereq = ARMAreseedPrecursor
    [./romcsv0]
      type = OrderedCSV
      output = 'ARMAreseed/results_0.csv'
      gold_files = 'ARMAreseed/signals_0.csv'
      rel_err = 1e-5
    [../]
    [./romcsv1]
      type = OrderedCSV
      output = 'ARMAreseed/results_1.csv'
      gold_files = 'ARMAreseed/signals_1.csv'
      rel_err = 1e-5
    [../]
    [./romcsv2]
      type = OrderedCSV
      output = 'ARMAreseed/results_2.csv'
      gold_files = 'ARMAreseed/signals_2.csv'
      rel_err = 1e-5
    [../]
    [./romcsv3]
      type = OrderedCSV
      output = 'ARMAreseed/results_3.csv'
      gold_files = 'ARMAreseed/signals_3.csv'
      rel_err = 1e-5
    [../]
  [../]

 [./SingleFourier]
   type = 'RavenFramework'
   input = 'single_fourier.xml'
   csv = 'SingleFourier/synthetic_0.csv'
   rel_err = 6e-1
  [../]

  [./MultipleArma]
   type = 'RavenFramework'
   input = 'multiple_arma.xml'
   output = 'MultipleArma/samples.csv MultipleArma/samples_0.csv MultipleArma/samples_1.csv MultipleArma/stats.xml'
   csv = 'MultipleArma/stats.csv'
   rel_err = 1e-1
  [../]

  [./MultipleFourier]
   type = 'RavenFramework'
   input = 'multiple_fourier.xml'
   output = 'MultipleFourier/samples.csv'
   csv = 'MultipleFourier/samples_0.csv'
   zero_threshold = 1.e-10
  [../]

  [./VARMA]
   type = 'RavenFramework'
   input = 'varma.xml'
   output = 'VARMA/plot_VARMA.png VARMA/plot_input.png VARMA/stats.xml VARMA/rommeta.xml VARMA/rommeta.csv VARMA/samples_0.csv'
   max_time = 500
    [./stats]
      type = OrderedCSV
      output = 'VARMA/stats.csv'
      rel_err = 1e-1
    [../]
  [../]

  [./ZeroFilter]
    type = 'RavenFramework'
    input = 'zero_filter.xml'
    output = 'ZeroFilter/synthetic.csv ZeroFilter/synthetic_0.csv ZeroFilter/synthetic.xml ZeroFilter/stats.xml'
    csv = 'ZeroFilter/stats.csv'
    rel_err = 2e-1
    max_time = 300
  [../]

  [./Segmented]
    type = 'RavenFramework'
    input = 'segmented.xml'
    output = 'Segmented/synthetic.csv Segmented/synthetic.xml Segmented/synthetic_0.csv'
    [./stats]
      type = OrderedCSV
      output = 'Segmented/stats.csv'
      rel_err = 1e-2
    [../]
    [./romcsv]
      type = OrderedCSV
      output = 'Segmented/rommeta.csv'
      rel_err = 1e-5
    [../]
    [./romxml]
      type = XML
      unordered = true
      output = 'Segmented/rommeta.xml'
      rel_err = 1e-5
    [../]
  [../]
  [./Clustered]
    type = 'RavenFramework'
    input = 'clustered.xml'
    [./rom_meta]
      type = XML
      output = 'Clustered/romMeta.xml'
      rel_err = 1e-5
    [../]
  [../]

  [./PreserveCdf]
    type = 'RavenFramework'
    input = 'preserve_cdf.xml'
    [./input_ldc]
      # this is primarily to test that sample_ldc will be a valid test.
      # If this fails, then either there's an error, or the gold_dur*.csv need regolding.
      # This is done by copying input_durs_0.csv 10 times to compare against the sample ldcs.
      # Hopefully we get a compare-samples-to-gold metric figured out so we can use that later.
      type = OrderedCSV
      output = 'PreserveCdf/input_durs_0.csv'
      rel_err = 1e-5
    [../]
    [./sample_ldc]
      # Even with identical seeds and inputs, the Fourier linear regressor fit produces
      # different coefficients and intercept values on different operating systems, even
      # multiple linux-based systems. Windows seems to be the most different, and as a
      # result the CDF bin metric can be sufficiently different on Windows as to not pass
      # the test.
      # This is exacerbated by the fact that manually performing the y=Ax+b calculation
      # (where b is the intercept, x is the Fourier signal, and A is the amplitudes matrix)
      # yields a slightly (1e-6 rel err) difference from using the linear engine's
      # prediction for the same. That change in this PR resulted in a change in the "metric"
      # between the expected and actual CDF bins on Windows from 0.63 to 0.65.

      type = OrderedCSV
      output = 'PreserveCdf/metric.csv'
      rel_err = 5e-2
    [../]
  [../]
   [./Peaks]
   type = 'RavenFramework'
   input = 'peaks.xml'
   output = 'Peaks/romMeta.csv'
   UnorderedXml = 'Peaks/romMeta.xml'
   rel_err = 1e-6
  [../]
[]
