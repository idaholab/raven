[Tests]

  [./biweight]
    type = 'RavenFramework'
    input = 'test_biweight.xml'
    csv = 'data/outDataBiweight.csv'
    output = 'data/outDataBiweight.xml'
    required_libraries = 'AMSC'
  [../]

  [./cosine]
    type = 'RavenFramework'
    input = 'test_cosine.xml'
    csv = 'data/outDataCosine.csv'
    output = 'data/outDataCosine.xml'
    required_libraries = 'AMSC'
  [../]

  [./Epanechnikov]
    type = 'RavenFramework'
    input = 'test_Epanechnikov.xml'
    csv = 'data/outDataEpanechnikov.csv'
    output = 'data/outDataEpanechnikov.xml'
    required_libraries = 'AMSC'
  [../]

  [./exponential]
    type = 'RavenFramework'
    input = 'test_exponential.xml'
    csv = 'data/outDataExponential.csv'
    output = 'data/outDataExponential.xml'
    required_libraries = 'AMSC'
  [../]

  [./Gaussian]
    type = 'RavenFramework'
    input = 'test_Gaussian.xml'
    csv = 'data/outDataGaussian.csv'
    output = 'data/outDataGaussian.xml'
    required_libraries = 'AMSC'
  [../]

  [./logistic]
    type = 'RavenFramework'
    input = 'test_logistic.xml'
    csv = 'data/outDataLogistic.csv'
    output = 'data/outDataLogistic.xml'
    required_libraries = 'AMSC'
  [../]

  [./Silverman]
    type = 'RavenFramework'
    input = 'test_Silverman.xml'
    csv = 'data/outDataSilverman.csv'
    output = 'data/outDataSilverman.xml'
    required_libraries = 'AMSC'
  [../]

  [./triangular]
    type = 'RavenFramework'
    input = 'test_triangular.xml'
    csv = 'data/outDataTriangular.csv'
    output = 'data/outDataTriangular.xml'
    required_libraries = 'AMSC'
  [../]

  [./tricube]
    type = 'RavenFramework'
    input = 'test_tricube.xml'
    csv = 'data/outDataTricube.csv'
    output = 'data/outDataTricube.xml'
    required_libraries = 'AMSC'
  [../]

  [./triweight]
    type = 'RavenFramework'
    input = 'test_triweight.xml'
    csv = 'data/outDataTriweight.csv'
    output = 'data/outDataTriweight.xml'
    required_libraries = 'AMSC'
  [../]

  [./uniform]
    type = 'RavenFramework'
    input = 'test_uniform.xml'
    csv = 'data/outDataUniform.csv'
    output = 'data/outDataUniform.xml'
    required_libraries = 'AMSC'
  [../]

  [./SVM]
    type = 'RavenFramework'
    input = 'test_SVM.xml'
    csv = 'data/outDataSVM.csv'
    output = 'data/outDataSVM.xml'
    required_libraries = 'AMSC'
    rel_err = 8e-2
  [../]

  [./smoothSVM]
    type = 'RavenFramework'
    input = 'test_smooth_SVM.xml'
    csv = 'data/outDataSmoothSVM.csv'
    output = 'data/outDataSmoothSVM.xml'
    required_libraries = 'AMSC'
    # This is the best we can do since there is non-deterministic behavior
    # occuring in the cross-valiadation of the SVM causing the predicted
    # probabilities to be variant across implementations presumably since
    # different information is withheld in the cross-validation of the SVM?
    rel_err = 2e-1
  [../]

  [./smoothBiweight]
    type = 'RavenFramework'
    input = 'test_smooth_biweight.xml'
    csv = 'data/outDataSmoothBiweight.csv'
    output = 'data/outDataSmoothBiweight.xml'
    required_libraries = 'AMSC'
  [../]

  [./smoothCosine]
    type = 'RavenFramework'
    input = 'test_smooth_cosine.xml'
    csv = 'data/outDataSmoothCosine.csv'
    output = 'data/outDataSmoothCosine.xml'
    required_libraries = 'AMSC'
  [../]

  [./smoothEpanechnikov]
    type = 'RavenFramework'
    input = 'test_smooth_Epanechnikov.xml'
    csv = 'data/outDataSmoothEpanechnikov.csv'
    output = 'data/outDataSmoothEpanechnikov.xml'
    required_libraries = 'AMSC'
  [../]

  [./smoothExponential]
    type = 'RavenFramework'
    input = 'test_smooth_exponential.xml'
    csv = 'data/outDataSmoothExponential.csv'
    output = 'data/outDataSmoothExponential.xml'
    required_libraries = 'AMSC'
  [../]

  [./smoothGaussian]
    type = 'RavenFramework'
    input = 'test_smooth_Gaussian.xml'
    csv = 'data/outDataSmoothGaussian.csv'
    output = 'data/outDataSmoothGaussian.xml'
    required_libraries = 'AMSC'
  [../]

  [./smoothLogistic]
    type = 'RavenFramework'
    input = 'test_smooth_logistic.xml'
    csv = 'data/outDataSmoothLogistic.csv'
    output = 'data/outDataSmoothLogistic.xml'
    required_libraries = 'AMSC'
  [../]

  [./smoothSilverman]
    type = 'RavenFramework'
    input = 'test_smooth_Silverman.xml'
    csv = 'data/outDataSmoothSilverman.csv'
    output = 'data/outDataSmoothSilverman.xml'
    required_libraries = 'AMSC'
  [../]

  [./smoothTriangular]
    type = 'RavenFramework'
    input = 'test_smooth_triangular.xml'
    csv = 'data/outDataSmoothTriangular.csv'
    output = 'data/outDataSmoothTriangular.xml'
    required_libraries = 'AMSC'
  [../]

  [./smoothTricube]
    type = 'RavenFramework'
    input = 'test_smooth_tricube.xml'
    csv = 'data/outDataSmoothTricube.csv'
    output = 'data/outDataSmoothTricube.xml'
    required_libraries = 'AMSC'
  [../]

  [./smoothTriweight]
    type = 'RavenFramework'
    input = 'test_smooth_triweight.xml'
    csv = 'data/outDataSmoothTriweight.csv'
    output = 'data/outDataSmoothTriweight.xml'
    required_libraries = 'AMSC'
  [../]

  [./smoothUniform]
    type = 'RavenFramework'
    input = 'test_smooth_uniform.xml'
    csv = 'data/outDataSmoothUniform.csv'
    output = 'data/outDataSmoothUniform.xml'
    required_libraries = 'AMSC'
  [../]

  [./parallel]
    type = 'RavenFramework'
    input = 'test_local_parallel.xml'
    csv = 'data/outDataParallel.csv'
    output = 'data/outDataParallel.xml'
    required_libraries = 'AMSC'
  [../]

   #[./topology_MSR_failures]
   # type = 'RavenFramework'
   # input = 'test_MSR_failures.xml'
   # required_libraries = 'AMSC'
   #[../]
[]
