<?xml version="1.0" ?>
<Simulation>
  <TestInfo>
    <name>framework.ND_external_MC</name>
    <author>mandd</author>
    <created>2015-03-04</created>
    <classesTested>Distributions.NDInverseWeight, Distributions.NDCartesianSpline, Samplers.MonteCarlo</classesTested>
    <description>
       This test is aimed to check the capability of RAVEN to handle ND (custom) probability density functions (distributions), when 
       a MonteCarlo sampling strategy is performed.     
    </description>
    <revisions>
      <revision author="mandd" date="2015-04-17">conversion to Database and DataObjects</revision>
      <revision author="alfoa" date="2015-06-18">Changed Name of all DataObjects</revision>
      <revision author="cogljj" date="2015-09-29">Modifing external modules to use relative to working directory.</revision>
      <revision author="maljdan" date="2016-04-06">Updating test cases to reflect the changes to the user input.</revision>
      <revision author="alfoa" date="2017-01-21">Adding this test description.</revision>
    </revisions>
    <requirements>R-RE-2</requirements>
  </TestInfo>
  <RunInfo>
    <WorkingDir>ND_test_MC</WorkingDir>
    <Sequence>FirstMRun</Sequence>
    <batchSize>1</batchSize>
  </RunInfo>

  <Files>
    <Input name="lorentzAttractor.py" type="">lorentzAttractor.py</Input>
    <Input name="TriangularExponential2D_scattered.txt" type="">TriangularExponential2D_scattered.txt</Input>
    <Input name="TriangularExponential2D_cartesian.txt" type="">TriangularExponential2D_cartesian.txt</Input>
    <Input name="covMatrix.txt" type="">covMatrix.txt</Input>
  </Files>

  <Models>
    <ExternalModel ModuleToLoad="lorentzAttractor" name="PythonModule" subType="">
      <variables>sigma,rho,beta,x,y,z,k,time,x0,y0,z0,k0</variables>
    </ExternalModel>
  </Models>

  <Distributions>
    <Normal name="k0_distrib">
      <mean>4</mean>
      <sigma>1</sigma>
    </Normal>
    <NDInverseWeight name="ND_InverseWeight_P">
      <p>3.0</p>
      <dataFilename type="PDF">2DgaussianScatteredPDF.txt</dataFilename>
      <workingDir>ND_test_MC/</workingDir>
    </NDInverseWeight>
    <NDInverseWeight name="ND_InverseWeight_C">
      <p>2.5</p>
      <dataFilename type="CDF">2DgaussianScatteredCDF.txt</dataFilename>
      <workingDir>ND_test_MC/</workingDir>
    </NDInverseWeight>
    <NDCartesianSpline name="ND_CartesianSpline_P">
      <dataFilename type="PDF">2DgaussianCartesianPDF.txt</dataFilename>
      <workingDir>ND_test_MC/</workingDir>
    </NDCartesianSpline>
    <NDCartesianSpline name="ND_CartesianSpline_C">
      <dataFilename type="CDF">2DgaussianCartesianCDF.txt</dataFilename>
      <workingDir>ND_test_MC/</workingDir>
    </NDCartesianSpline>
  </Distributions>

  <Samplers>
    <MonteCarlo name="MC_external">
      <samplerInit>
        <limit>2</limit>
        <initialSeed>1234</initialSeed>
        <distInit>
          <distribution name="ND_CartesianSpline_P">
            <initialGridDisc>5</initialGridDisc>
            <tolerance>0.2</tolerance>
          </distribution>
        </distInit>
      </samplerInit>
      <variable name="k0">
        <distribution>k0_distrib</distribution>
      </variable>
      <variable name="x0">
        <distribution dim="1">ND_CartesianSpline_P</distribution>
      </variable>
      <variable name="y0,z0">
        <distribution dim="2">ND_CartesianSpline_P</distribution>
      </variable>
    </MonteCarlo>
  </Samplers>

  <Steps>
    <MultiRun name="FirstMRun" re-seeding="1">
      <Input class="Files" type="">lorentzAttractor.py</Input>
      <Model class="Models" type="ExternalModel">PythonModule</Model>
      <Sampler class="Samplers" type="MonteCarlo">MC_external</Sampler>
      <Output class="DataObjects" type="PointSet">testPrintPointSet</Output>
      <Output class="OutStreams" type="Print">testPrintPointSet_dump</Output>
    </MultiRun>
  </Steps>

  <OutStreams>
    <Print name="testPrintPointSet_dump">
      <type>csv</type>
      <source>testPrintPointSet</source>
      <what>input,output</what>
    </Print>
  </OutStreams>

  <DataObjects>
    <PointSet name="testPrintPointSet">
      <Input>x0,y0,z0,k0</Input>
      <Output>x,y,z,k</Output>
    </PointSet>
  </DataObjects>

</Simulation>
