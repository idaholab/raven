[Tests]
 [./image_generation_text]
  type = 'RavenFramework'
  input = 'imageGeneration_ps.xml'
  output = 'plot/1-test_scatter.ps'
  text = 'plot/1-test_scatter.ps'
  comment = '%'
  minimum_library_versions = 'matplotlib 2.0'
 [../]

 [./image_generation_raw]
  type = 'RavenPython'
  input = 'testImageGeneration.py'
  #input = 'imageGeneration_png.xml'
  required_executable = 'compare'
  required_executable_check_flags='gold/plot/1-test_scatter.png gold/plot/1-test_scatter.png -metric ae null:'
  minimum_library_versions = 'matplotlib 2.0'
 [../]

# [./colorbar_plot]
#   type = 'RavenPython'
#   input = 'testImageColorbar.py'
#   #input = 'test_colorbar.xml'
#   required_executable = 'compare'
#   required_executable_check_flags='gold/plot/colorbarTest.png gold/plot/colorbarTest.png -metric ae null:'
# [../]

 [./interactive_plotting]
  type = 'RavenFramework'
  input = 'interactivePlot.xml'
  required_libraries = 'autopy pyscreenshot'
  output = 'plot/test_0_1.png plot/test_0_2.png plot/test_1_0.png plot/test_1_1.png plot/test_1_2.png plot/test_2_0.png plot/test_2_1.png plot/test_2_2.png'
  [../]

 [./invalidInterpolation]
  type = 'RavenFramework'
  input = 'invalidInterpolation.xml'
  ## We don't care what these image files look like (since they should be empty)
  ## Our only concern is that we are able to generate them without error, since
  ## the defect these test had to do with the code crashing.
  output = 'plot/contour.png plot/surface.png plot/trisurface.png plot/wireframe.png plot/pseudocolor.png'
  [../]

 [./test_subPlot]
  type = 'RavenFramework'
  input = 'test_subPlot.xml'
  output = 'subplot_output/1-subPlot1_surface-surface-surface.png subplot_output/1-subPlot2_stem-stem-stem.png subplot_output/1-subPlot3_stem-stem-stem-stem-stem.png'
 [../]

 [./io_ROM_pickle]
  type = 'RavenFramework'
  input = 'test_io_ROM_pickle.xml'
  csv = 'IO_ROM_PICKLE/PrintData_Pickle.csv IO_ROM_PICKLE/PrintData.csv'
 [../]

 [./legend]
  type = 'RavenFramework'
  input = 'test_legend.xml'
  output = 'plot/legendTest.png'
 [../]

 [./line]
  type = 'RavenFramework'
  input = 'line_plot.xml'
  output = 'linePlot/to_plot_line.png'
  image  = 'linePlot/to_plot_line.png'
  rel_err = 0.0001
  required_libraries = 'PIL'
 [../]
[]
