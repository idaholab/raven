<?xml version="1.0" ?>
<Simulation>
  <RunInfo>
    <WorkingDir>multiPCA</WorkingDir>
    <Sequence>FirstMRun,Dump</Sequence>
    <batchSize>1</batchSize>
  </RunInfo>
  <TestInfo>
    <name>framework/pcaSampler/multiPCA</name>
    <author>wangc</author>
    <created>2016-02-16</created>
    <classesTested>Distributions.MultivariateNormal,Samplers.MonteCarlo</classesTested>
    <description>
      Tests use of multiple PCA surrogates in one sampling scheme.
    </description>
  </TestInfo>

  <Files>
    <Input name="lorentzAttractor_noK.py" type="">lorentzAttractor_noK.py</Input>
  </Files>

  <Models>
    <ExternalModel ModuleToLoad="lorentzAttractor_noK" name="PythonModule" subType="">
      <variables>sigma,rho,beta,x,y,z,time,x0,y0,z0</variables>
    </ExternalModel>
  </Models>

  <Distributions>
    <MultivariateNormal method="pca" name="MVN1">
      <transformation>
        <rank>2</rank>
      </transformation>
      <mu>0.0 60.0 60.0</mu>
      <covariance type="abs">
            1.0       0.8      -0.5
            0.8       1.0      0.3
            -0.5  0.3  0.8
        </covariance>
    </MultivariateNormal>
    <MultivariateNormal method="pca" name="MVN2">
      <transformation>
        <rank>2</rank>
      </transformation>
      <mu>0.0 60.0 60.0</mu>
      <covariance type="abs">
            1.0       0.8      -0.5
            0.8       1.0      0.3
            -0.5      0.3      0.8
        </covariance>
    </MultivariateNormal>
  </Distributions>

  <Samplers>
    <MonteCarlo name="MC_external">
      <samplerInit>
        <limit>20</limit>
        <initialSeed>103186</initialSeed>
      </samplerInit>
      <variable name="x1">
        <distribution dim="1">MVN1</distribution>
      </variable>
      <variable name="y1">
        <distribution dim="2">MVN1</distribution>
      </variable>
      <variable name="x2">
        <distribution dim="1">MVN2</distribution>
      </variable>
      <variable name="y2">
        <distribution dim="2">MVN2</distribution>
      </variable>
      <variablesTransformation distribution="MVN1">
        <latentVariables>x1,y1</latentVariables>
        <manifestVariables>z0,y0,x0</manifestVariables>
        <manifestVariablesIndex>3,2,1</manifestVariablesIndex>
        <method>pca</method>
      </variablesTransformation>
      <variablesTransformation distribution="MVN2">
        <latentVariables>x2,y2</latentVariables>
        <manifestVariables>sigma,rho,beta</manifestVariables>
        <method>pca</method>
      </variablesTransformation>
    </MonteCarlo>
  </Samplers>

  <Steps>
    <MultiRun name="FirstMRun">
      <Input class="DataObjects" type="PointSet">inputPlaceHolder</Input>
      <Model class="Models" type="ExternalModel">PythonModule</Model>
      <Sampler class="Samplers" type="MonteCarlo">MC_external</Sampler>
      <Output class="DataObjects" type="PointSet">testPrintPointSet</Output>
    </MultiRun>
    <IOStep name="Dump">
      <Input class="DataObjects" type="PointSet">testPrintPointSet</Input>
      <Output class="OutStreams" type="Print">testPrintPointSet_dump</Output>
    </IOStep>
  </Steps>

  <OutStreams>
    <Print name="testPrintPointSet_dump">
      <type>csv</type>
      <source>testPrintPointSet</source>
      <what>input,output</what>
    </Print>
  </OutStreams>

  <DataObjects>
    <PointSet name="testPrintPointSet">
      <Input>x0,y0,z0,sigma,rho,beta</Input>
      <Output>x,y,z</Output>
    </PointSet>
    <PointSet name="inputPlaceHolder">
      <Input>x0,y0,z0,sigma,rho,beta</Input>
      <Output>OutputPlaceHolder</Output>
    </PointSet>
  </DataObjects>

</Simulation>
