#!/usr/bin/env python
from __future__ import print_function
import sys, os, subprocess, re

# Set the current working directory to the directory where this script is located
os.chdir(os.path.abspath(os.path.dirname(sys.argv[0])))

#### Set the name of the application here and moose directory relative to the application
app_name = 'RAVEN'

MOOSE_DIR = os.path.abspath(os.path.join('..', 'moose'))
#### See if a submodule is available
if os.path.exists(os.path.abspath(os.path.join('moose', 'python'))):
  MOOSE_DIR = os.path.abspath('moose')
#### See if MOOSE_DIR is already in the environment instead
if "MOOSE_DIR" in os.environ:
  MOOSE_DIR = os.environ['MOOSE_DIR']

sys.path.append(os.path.join(MOOSE_DIR, 'python'))
import path_tool
path_tool.activate_module('TestHarness')

#Try to import the raven libs dir into the PYTHONPATH

# try:
#   if os.environ.get("CHECK_PYTHON3","0") == "1":
#     raven_libs_dir = subprocess.check_output("ls -d $HOME/raven_libs/pylibs3/*/python*/site-packages",shell=True,stderr=subprocess.STDOUT)
#   else:
#     raven_libs_dir = subprocess.check_output("ls -d $HOME/raven_libs/pylibs/*/python*/site-packages",shell=True,stderr=subprocess.STDOUT)
#   raven_libs_dir = raven_libs_dir.decode().strip()
#   os.environ["PYTHONPATH"] = raven_libs_dir + os.pathsep + os.environ.get("PYTHONPATH","")
#   sys.path.append(raven_libs_dir)
# except:
#   sys.path.append(os.path.join("scripts","TestHarness","testers"))
#   import RavenUtils
#   missing,too_old = RavenUtils.checkForMissingModules()
#   if len(missing) > 0:
#     print("No raven_libs found and missing modules "+",".join(missing))
#   if len(too_old) > 0:
#     print("No raven_libs found and old version modules "+",".join(too_old))

#add framework contrib path
RAVEN_DIR = os.path.dirname(os.path.realpath(__file__))
os.environ["PYTHONPATH"] = os.path.join(RAVEN_DIR,'framework','contrib') + os.pathsep + os.environ.get("PYTHONPATH","")

coverage = False
library_report = False
for i in sys.argv:
  if i == "--check_coverage":
    coverage = True
  elif i == "--library_report" or i == "--library-report":
    library_report = True
if coverage:
  from subprocess import call
  call(["./check_py_coverage.sh"])
elif library_report:
  print("PYTHONPATH="+os.environ.get("PYTHONPATH",""))
  path = os.environ.get("PATH","")
  print("PATH="+path)
  print("Python Executable: ",sys.executable)
  print("Possible Python Executables on System:")
  for pathPart in path.split(os.pathsep):
    if os.path.isdir(pathPart):
      for directoryEntry in os.listdir(pathPart):
        lower = directoryEntry.lower()
        #match things like python, python2, python2.7, python.exe
        if re.match("python(\\d*(\\.\\d+)?)(\\.exe)?$",lower):
          print(pathPart+os.sep+directoryEntry)
  import platform
  print("OS:",platform.platform())
  print("Python:",sys.version)
  try:
    if os.path.exists(".git"):
      print("Git information:")
      os.system('git log -1 --format="%H %aD"')
      os.system('git describe')
      os.system('git submodule')
    elif os.path.exists("Version.txt"):
      print("Version.txt:")
      print(open("Version.txt","r").read())
    else:
      print("Could not find RAVEN version info")
  except:
    print("Failed to find git version")
  sys.path.append(os.path.join("scripts","TestHarness","testers"))
  sys.path.insert(0,os.path.join("framework","utils"))
  import RavenUtils,utils
  #missing,too_old = RavenUtils.checkForMissingModules()
  #print(missing,too_old)
  report_list = RavenUtils.modulesReport()
  amsc_report = RavenUtils.moduleReport('AMSC')
  report_list.append(('AMSC',amsc_report[0],amsc_report[1],""))
  print("\nLibraries report:\n")
  for module, found, message, version in report_list:
    if found:
      print(module,version,"\n",message,"\n")
    else:
      print(module+' not found\n')
  framework_dir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]),"framework"))
  utils.find_crow(framework_dir)
  try:
    distribution1D = utils.findCrowModule('distribution1D')
    print("distribution1D","\n",distribution1D)
    print()
  except ImportError:
    print("distribution1D not found\n")
  try:
    interpolationND = utils.findCrowModule('interpolationND')
    print("interpolationND","\n",interpolationND)
  except ImportError:
    print("interpolationND not found\n")
  try:
    randomENG = utils.findCrowModule('randomENG')
    print("randomENG","\n",randomENG)
  except ImportError:
    print("randomENG not found\n")
else:
  from TestHarness import TestHarness
  sys.path.append(os.path.join("scripts","TestHarness","testers"))
  import RavenUtils
  missing,outOfRange,notQA = RavenUtils.checkForMissingModules()
  if len(missing) + len(outOfRange) > 0 and RavenUtils.checkVersions():
    print("ERROR: too old, too new, or missing raven libraries, not running:")
    for error in missing + outOfRange + notQA:
      print(error)
    sys.exit(-1)
  else:
    if  len(missing) + len(outOfRange) > 0:
      print("WARNING: not using tested versions of the libraries:")
      for warning in notQA + missing + outOfRange:
        print(warning)
    # Run the tests!
    TestHarness.buildAndRun(sys.argv, app_name, MOOSE_DIR)


